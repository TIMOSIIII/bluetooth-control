# bluetooth camera 

import os
import smbus 
import threading
from bluetooth import *
import RPi.GPIO as GPIO
import time
import picamera

bluetooth_audio_address = "98:DA:60:02:D0:10" # bluetooth audio 주소
port = 1 

def setup():
    # Set up a Bluetooth server
    server_sock=BluetoothSocket(RFCOMM)
    server_sock.bind(("",port)) 
    server_sock.listen(1) 
    bluetooth_audio_sock = BluetoothSocket(RFCOMM)
    bluetooth_audio_sock.connect((bluetooth_audio_address, port))
    # Set up the GPIO pins
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(5, GPIO.OUT) 
    GPIO.output(5, True)
    interrupt_pin = 2
    bus = smbus.SMBus(1) 
    GPIO.setup(interrupt_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP) 
    GPIO.add_event_detect(interrupt_pin, GPIO.FALLING, callback=interrupt_handler, bouncetime=200) 
    GPIO.setup(4, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
    return server_sock, interrupt_pin 

def interrupt_handler(channel):
    print("Interrupt detected")
    with picamera.PiCamera() as camera:
        camera.resolution = (640, 480)
        camera.start_preview()
        time.sleep(2)
        camera.capture('image.jpg')
        camera.stop_preview()
    file = open("image.jpg", "rb")
    data = file.read()
    file.close()
    GPIO.output(4, False) 
    print("Waiting for connection on RFCOMM channel %d" % port)
    client_sock, client_info = server_sock.accept()
    print("Accepted connection from ", client_info)
    with open("image.jpg", "rb") as image:
        data = image.read()
    client_sock.send(data)
    print("Sent image")

def server():
    server_sock, interrupt_pin = setup()
    while True:
        GPIO.add_event_detect(4, GPIO.FALLING, callback=interrupt_handler, bouncetime=200)
        print("Waiting for a connection...")
        client_sock, address = server_sock.accept()
        print(f"Connection from {address}")
        try:
            while True:
                data = client_sock.recv(1024)
                if not data:
                    break
                # Do something with the data received
                print(data)
        except IOError:
            pass
        client_sock.close()
    server_sock.close()

def client():
    server_sock, interrupt_pin = setup()
    # Connect to a Bluetooth server
    client_sock = BluetoothSocket(RFCOMM)
    client_sock.connect((bluetooth_audio_address, port))
    while True:
        message = input("Enter message to send: ")
        if message == "q":
            break
        client_sock.send(message.encode())
    client_sock.close()

t1 = threading.Thread(target=server) 
t2 = threading.Thread(target=client) 
t1.start()
t2.start() 
